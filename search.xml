<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>关于svn</title>
      <link href="/2018/12/12/%E5%85%B3%E4%BA%8Esvn/"/>
      <url>/2018/12/12/%E5%85%B3%E4%BA%8Esvn/</url>
      
        <content type="html"><![CDATA[<h1 id="svn-subversion"><a href="#svn-subversion" class="headerlink" title="svn(subversion)"></a>svn(subversion)</h1><p>它是一个自由/开源的版本控制系统，一组文件存放在中心版本库，记录每一次文件和目录的修改，Subversion允许把数据恢复到早期版本，或是检查数据修改的历史，Subversion可以通过网络访问它的版本库，从而使用户在不同的电脑上进行操作。</p><h2 id="svn的安装。"><a href="#svn的安装。" class="headerlink" title="svn的安装。"></a>svn的安装。</h2><p>先安装svn服务端。然后安装svn客户端。服务端在widows下强烈推荐使用VisualSVN Server 他有一个较为便捷的图形界面。还可以加装汉化包。客户端的话最流行的是小乌龟TortoiseSVN。</p><h2 id="svn的使用"><a href="#svn的使用" class="headerlink" title="svn的使用"></a>svn的使用</h2><h3 id="1-安装小乌龟"><a href="#1-安装小乌龟" class="headerlink" title="1.安装小乌龟"></a>1.安装小乌龟</h3><h3 id="2-导出项目"><a href="#2-导出项目" class="headerlink" title="2.导出项目"></a>2.导出项目</h3><h4 id="1-idea导出项目"><a href="#1-idea导出项目" class="headerlink" title="(1)idea导出项目"></a>(1)idea导出项目</h4><p><img src="/md_images/checkoutproject1.png" alt=""></p><h4 id="2-选择要导出的svn库"><a href="#2-选择要导出的svn库" class="headerlink" title="(2)选择要导出的svn库"></a>(2)选择要导出的svn库</h4><p><img src="/md_images/selectsvn.png" alt=""><br>库默认是没有的，所以要先导入，点击”+”号。如下图：<br><img src="/md_images/selectsvn1.png" alt=""></p><p>然后在弹出的窗体中输入url地址<br><img src="/md_images/selectsvn2.png" alt=""><br>然后点击checkout按钮可以直接导出项目<br><img src="/md_images/selectsvn3.png" alt=""></p><h3 id="3版本管理"><a href="#3版本管理" class="headerlink" title="3版本管理"></a>3版本管理</h3><h4 id="1-查看历史版本"><a href="#1-查看历史版本" class="headerlink" title="(1)查看历史版本"></a>(1)查看历史版本</h4><p><img src="/md_images/selectversion.png" alt=""></p><h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><p><img src="/md_images/banbenguanli.png" alt=""></p><h3 id="4具体使用详情"><a href="#4具体使用详情" class="headerlink" title="4具体使用详情"></a>4具体使用详情</h3><h4 id="1-更新项目"><a href="#1-更新项目" class="headerlink" title="(1)更新项目"></a>(1)更新项目</h4><p><img src="/md_images/svnupdate.png" alt=""></p><h4 id="2-提交修改"><a href="#2-提交修改" class="headerlink" title="(2)提交修改"></a>(2)提交修改</h4><p><img src="/md_images/tijiaobendixiugai.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 版本控制工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery</title>
      <link href="/2018/12/11/jquery/"/>
      <url>/2018/12/11/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h1><p>Jquery 是js代码库。他的设计宗旨是”write less do more”,及倡导写更少的代码，做更多的事情。它封装常用的js功能代码。提供一种简单的js设计模式。优化html文档的操作。事件处理。动画处理和ajax交互jquery的核心特征可以总结为具有独特的链式语法和短小清晰的多功能接口。具有高效灵活的css选择器。并且可以对css选择器进行扩展。拥有便捷的插件扩展机制和丰富的插件。</p><h2 id="1。选择器"><a href="#1。选择器" class="headerlink" title="1。选择器"></a>1。选择器</h2>]]></content>
      
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于spring的ioc</title>
      <link href="/2018/12/01/%E5%85%B3%E4%BA%8Espring%E7%9A%84ioc/"/>
      <url>/2018/12/01/%E5%85%B3%E4%BA%8Espring%E7%9A%84ioc/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-ioc"><a href="#spring-ioc" class="headerlink" title="spring ioc"></a>spring ioc</h1><h2 id="spring-ioc是什么。"><a href="#spring-ioc是什么。" class="headerlink" title="spring ioc是什么。"></a>spring ioc是什么。</h2><pre><code>Ioc—Inversion of Control，即“控制反转”，不是一种技术是一种设计思想。在Java开发中。ioc意味着将设计好的程序交给容器控制。而不是在对象内部直接控制。</code></pre><h2 id="如何理解好ioc"><a href="#如何理解好ioc" class="headerlink" title="如何理解好ioc"></a>如何理解好ioc</h2><pre><code>理解好ioc的关键在于：谁控制谁，控制什么，为什么是反转，那些方面反转了。</code></pre><h3 id="谁控制谁，控制什么"><a href="#谁控制谁，控制什么" class="headerlink" title="谁控制谁，控制什么"></a>谁控制谁，控制什么</h3><pre><code>传统javase设计，我们直接在对象内部通过new进行创建对象。是程序主动去创建依赖对象；而ioc是专门有一个容器来创建对象。既用ioc容器来控制对象的创建。提问1：谁控制谁？ioc容器控制了对象。提问2：控制了什么？主要控制了外部资源的获取。</code></pre><h3 id="为何是反转，那些方面反转了。"><a href="#为何是反转，那些方面反转了。" class="headerlink" title="为何是反转，那些方面反转了。"></a>为何是反转，那些方面反转了。</h3><pre><code>有反转就有正转。传统应用程序是由我们自己在对象中主动，控制去直接依赖对象。也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；提问1：为什么是反转？因为由容器帮我们注入依赖对象，对象只是被动接受依赖对象。所以是反转。提问2：那些是反转？依赖对象的获取被反转了。</code></pre><h1 id="ioc能做什么？"><a href="#ioc能做什么？" class="headerlink" title="ioc能做什么？"></a>ioc能做什么？</h1><pre><code>ioc不是一种技术，是一种编程思想，一种重要的面向对象编程的法则。它能轻松指导我们设计出松耦合。更优良的程序。</code></pre><h1 id="ioc和DI"><a href="#ioc和DI" class="headerlink" title="ioc和DI"></a>ioc和DI</h1><pre><code>DI—Dependency Injection，即“依赖注入”：组件之间的依赖关系由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。    </code></pre><p><em>谁依赖于谁？<br>应用程序依赖于ioc容器。</em>为什么要依赖？<br>应用程序需要ioc容器来提供对象需要的外部资源<br><em>谁注入谁？<br>ioc容器注入应用程序某个对象，应用程序依赖的对象。</em>注入了什么？<br>注入某个对象所需要的外部资源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目实践1</title>
      <link href="/2018/11/18/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B51/"/>
      <url>/2018/11/18/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B51/</url>
      
        <content type="html"><![CDATA[<h1 id="我的分享平台项目（vue-springboot-mybatisplus）"><a href="#我的分享平台项目（vue-springboot-mybatisplus）" class="headerlink" title="我的分享平台项目（vue+springboot+mybatisplus）"></a>我的分享平台项目（vue+springboot+mybatisplus）</h1><h2 id="项目工具"><a href="#项目工具" class="headerlink" title="项目工具"></a>项目工具</h2><p>node.js,maven </p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring的优缺点</title>
      <link href="/2018/11/18/spring%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2018/11/18/spring%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Spring的好处"><a href="#使用Spring的好处" class="headerlink" title="使用Spring的好处"></a>使用Spring的好处</h1><h2 id="轻量级框架"><a href="#轻量级框架" class="headerlink" title="轻量级框架"></a>轻量级框架</h2><p>Spring是轻量级框架,基本的版本大约2M</p><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><p>Spring通过控制反转实现松散耦合,对象们给它们的依赖,而不是创建或者查找依赖的对象们 。<br>方便解耦,简化开发</p><h2 id="面相切面的编程-AOP"><a href="#面相切面的编程-AOP" class="headerlink" title="面相切面的编程 AOP"></a>面相切面的编程 AOP</h2><p>Spring支持面相切面的编程,并且把应用业务逻辑和系统分开</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Spring 包含并管理应用中对象的生命周期和配置</p><h2 id="MVC框架"><a href="#MVC框架" class="headerlink" title="MVC框架"></a>MVC框架</h2><p>Spring的WEB框架是个精心设计的框架,是WEB框架的一个很好的替代品</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>Spring 提供一个持续的事务管理接口,可以扩展到上至本地事务下至全局事务(JTA)</p><p>Spring 提供方便的API把具体技术的相关异常(比如由JDBC Hibernate or JDO 抛出的) 转化为一致的 unchecked异常</p><h1 id="关于Spring框架的缺点"><a href="#关于Spring框架的缺点" class="headerlink" title="关于Spring框架的缺点"></a>关于Spring框架的缺点</h1><h2 id="明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。"><a href="#明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。" class="headerlink" title="明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。"></a>明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。</h2><p>Spring的核心概念是 IOP（控制反转） 和AOC(面向切面) 他的服务对象就是那些bean，spring完全可以理解为存放那些bean的容器。</p><h2 id="关于IOC（控制反转）"><a href="#关于IOC（控制反转）" class="headerlink" title="关于IOC（控制反转）"></a>关于IOC（控制反转）</h2><p>IOC的目的在于让开发者关注的重心在于如何使用那些bean，不管bean的来源是哪儿。@Autowired就出现，我们只需要关心如何使用。<br>但是为了弄好这个，Spring弄了多少东西，BeanDefinition，BeanFactory，FactoryBean，然后Bean的生命周期接口好几个，Aware接口又好几个，等等。</p><h2 id="关于AOP（面向切面）"><a href="#关于AOP（面向切面）" class="headerlink" title="关于AOP（面向切面）"></a>关于AOP（面向切面）</h2><p>AOP在spring中的主要目的是以一种非浸入的方式对bean进行扩展。为了对bean支持，Spring弄了一套AspctJ的子集，既有Java原生的接口代理，又有更加灵活的Cglib，光是AOP的概念就不少，更不要说实现的原理。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="Spring就是围绕着bean展开的"><a href="#Spring就是围绕着bean展开的" class="headerlink" title="Spring就是围绕着bean展开的"></a>Spring就是围绕着bean展开的</h2><p>Spring主要就是作为bean的容器，在这个基础上，有了SpringMVC，有了JPA，有了Cloud，有了Data Flow，以及其他模块。</p><h2 id="不全是bean"><a href="#不全是bean" class="headerlink" title="不全是bean"></a>不全是bean</h2><h3 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h3><p>核心是Hibernate</p><h3 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h3><p>核心是另外一套微服务框架。</p><h2 id="调用繁复"><a href="#调用繁复" class="headerlink" title="调用繁复"></a>调用繁复</h2><p>###<br>随便找个地方打断点，调用就不下二十来层，在现在这种强调轻量化服务的大环境下，是较大的弊端。</p><p>###<br>Java这门语言动态性本来就是它的弱项，Spring能把Java包装的像个动态化的语言已经蛮拼了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/17/hello-world/"/>
      <url>/2018/11/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
