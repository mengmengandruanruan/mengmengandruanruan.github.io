<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>js中的类</title>
      <link href="/2019/08/13/js%E4%B8%AD%E7%9A%84%E7%B1%BB/"/>
      <url>/2019/08/13/js%E4%B8%AD%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>#class<br>js本身不是面向对象的语言，设计之初没有提供对类的支持。在es6中新增加了很多支持类的关键字。如class constructor等等。<br>本质上是封装好的语法糖。<br>真正了解js中的类还得从es5的写法中去学习。</p><h2 id="一-定义类"><a href="#一-定义类" class="headerlink" title="一.定义类"></a>一.定义类</h2><pre><code>function Animal(){        this.name=&apos;&apos;　　　　this.species = &quot;动物&quot;;　　}let a = new Animal()</code></pre><h2 id="二-JS中的prototype、proto与constructor"><a href="#二-JS中的prototype、proto与constructor" class="headerlink" title="二.JS中的prototype、proto与constructor"></a>二.JS中的prototype、<strong>proto</strong>与constructor</h2><h3 id="1-隐式原型-proto"><a href="#1-隐式原型-proto" class="headerlink" title="1.隐式原型(__proto__)"></a>1.隐式原型(__proto__)</h3><p><img src="/md_images/proto.png" alt=""><br>__proto <strong>属性的作用是当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto </strong>所指向的哪个对象里找。如果父对象内部不存在。则继续在父对象的父对象里面查询。直到原型链顶端null。</p><h4 id="①proto和constructor属性是对象所独有的。"><a href="#①proto和constructor属性是对象所独有的。" class="headerlink" title="①proto和constructor属性是对象所独有的。"></a>①<strong>proto</strong>和constructor属性是对象所独有的。</h4><h4 id="②-prototype属性是函数所独有的，但是由于js中函数也是对象，所以函数有proto-constructor和prototype三个属性"><a href="#②-prototype属性是函数所独有的，但是由于js中函数也是对象，所以函数有proto-constructor和prototype三个属性" class="headerlink" title="② prototype属性是函数所独有的，但是由于js中函数也是对象，所以函数有proto,constructor和prototype三个属性"></a>② prototype属性是函数所独有的，但是由于js中函数也是对象，所以函数有<strong>proto</strong>,constructor和prototype三个属性</h4><h3 id="2-prototype属性"><a href="#2-prototype属性" class="headerlink" title="2.prototype属性"></a>2.prototype属性</h3><p><img src="/md_images/prototype.png" alt=""><br>它的含义是函数的原型对象，也就是这个函数（其实所有函数都可以作为构造函数）所创建的实例的原型对象。它的作用就是包含可以由特定类型的所有实例共享的属性和方法，也就是让该函数所实例化的对象们都可以找到公用的属性和方法（任何函数在创建的时候，其实会默认同时创建该函数的prototype对象）。</p><h4 id="①prototype属性是函数所独有的。"><a href="#①prototype属性是函数所独有的。" class="headerlink" title="①prototype属性是函数所独有的。"></a>①prototype属性是函数所独有的。</h4><h4 id="②它从一个函数指向一个对象。"><a href="#②它从一个函数指向一个对象。" class="headerlink" title="②它从一个函数指向一个对象。"></a>②它从一个函数指向一个对象。</h4><h3 id="3-constructor属性"><a href="#3-constructor属性" class="headerlink" title="3.constructor属性"></a>3.constructor属性</h3><p><img src="/md_images/constructor.png" alt=""><br>每个对象都有构造函数（本身拥有或继承而来，继承而来的要结合<strong>proto</strong>属性查看会更清楚点，如下图所示），从上图中可以看出Function这个对象比较特殊，它的构造函数就是它自己（因为Function可以看成是一个函数，也可以是一个对象），所有函数和对象最终都是由Function构造函数得来，所以constructor属性的终点就是Function这个函数。</p><h4 id="①constructor属性也是对象才拥有的"><a href="#①constructor属性也是对象才拥有的" class="headerlink" title="①constructor属性也是对象才拥有的"></a>①constructor属性也是对象才拥有的</h4><h4 id="②含义就是指向该对象的构造函数"><a href="#②含义就是指向该对象的构造函数" class="headerlink" title="②含义就是指向该对象的构造函数"></a>②含义就是指向该对象的构造函数</h4><h2 id="三-继承（原型模式）"><a href="#三-继承（原型模式）" class="headerlink" title="三.继承（原型模式）"></a>三.继承（原型模式）</h2><p>类的继承分三步；<br>第一步 把子类的原型指向父类；<br>第二步 把子类的原型的构造函数指向子类函数对象；</p><pre><code>function Cat(){    this.eat=function(){        console.log(&apos;I like fish&apos;+this.name)    }}Cat.prototype = new Animal();Cat.prototype.constructor = Cat;let cat = new Cat();    cat.name=&quot;mimi&quot;    cat.eat()    console.log(cat.constructor)</code></pre>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>vue中axios配置的两种方式</title>
      <link href="/2019/04/29/vue-axios%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/04/29/vue-axios%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="首先要明白的是axios是什么："><a href="#首先要明白的是axios是什么：" class="headerlink" title="首先要明白的是axios是什么："></a>首先要明白的是axios是什么：</h3><p>axios是基于promise（诺言）用于浏览器和node.js是http客户端。</p><h3 id="axios的作用是什么呢："><a href="#axios的作用是什么呢：" class="headerlink" title="axios的作用是什么呢："></a>axios的作用是什么呢：</h3><p>axios主要是用于向后台发起请求的，还有在请求中做更多是可控功能。<br>#<br>在vue项目中使用axios主要有两种方式。一种是全局注册引用，另一种是在api中封装调用。个人比较偏好前者。<br>因为方便- -。但是后者会使项目的耦合度更低。结构也更清晰。利于维护。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="全局引用"><a href="#全局引用" class="headerlink" title="全局引用"></a>全局引用</h2><p>在vue 项目中大部分插件都可以在main.js中用Vue.use方法直接引用，但是axios不能这样做。axios可以通过修该Vue原型的方法进行引用。    </p><pre><code>Vue.prototype.http=axios</code></pre><p> #<br>不过通常我们还需要对axios进行一定的封装。比如说添加访问拦截和响应拦截。<br>所以我们通常的做法是新建一个http.js（名字无所谓叫阿三.js都行）文件。在http.js中引用axios<br>然后通过axios.create创建一个实例。  </p><pre><code>const http = axios.create({  timeout: 1000 * 30,  withCredentials: true,  headers: {    &apos;Content-Type&apos;: &apos;application/json; charset=utf-8&apos;  }})    </code></pre><p>然后将这个实列的interceptors（拦截器）进行设置</p><pre><code>/** * 请求拦截 */  http.interceptors.request.use(config =&gt; {  config.headers[&apos;token&apos;] = Vue.cookie.get(&apos;token&apos;) // 请求头带上token  return config}, error =&gt; {  return Promise.reject(error)})</code></pre><p>也可以添加参数处理</p><pre><code>/** * get请求参数处理 * @param {*} params 参数对象 * @param {*} openDefultParams 是否开启默认参数? */http.adornParams = (params = {}, openDefultParams = true) =&gt; {  var defaults = {    &apos;t&apos;: new Date().getTime()  }  return openDefultParams ? merge(defaults, params) : params}</code></pre><p>最后 export default http 我们就可以在main.js 里面引用http对象然后在Vue.prototype中添加。就可以全局使用了。    </p><h2 id="在api中封装"><a href="#在api中封装" class="headerlink" title="在api中封装"></a>在api中封装</h2><p>同样api中封装也需要有一个http.js创建axios对象并进行封装，但是不同的是这里会通过创建api文件夹对需要进行交互的接口进行模块化封装。页面需要调用某该接口。需要<br>直接该模块。传递相应的参数。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>javascrip标准参考随笔</title>
      <link href="/2019/01/25/javascrip%E6%A0%87%E5%87%86%E5%8F%82%E8%80%83%E9%9A%8F%E7%AC%94/"/>
      <url>/2019/01/25/javascrip%E6%A0%87%E5%87%86%E5%8F%82%E8%80%83%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h1 id="看大神解读JavaScript"><a href="#看大神解读JavaScript" class="headerlink" title="看大神解读JavaScript"></a>看大神解读JavaScript</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="1-变量提升"><a href="#1-变量提升" class="headerlink" title="1.变量提升"></a>1.变量提升</h3><p>javaScrip引擎的工作方式是先取得所有的变量，再一行行的运行。这造成的结果，就是所有变量的声明语句，都会被提升到代码头部。这就叫变量提升。</p><h3 id="2-switch"><a href="#2-switch" class="headerlink" title="2.switch"></a>2.switch</h3><p>switc语句后的表达式采用的是严格相等运算符，不是相等运算符。在比较时不会发生类型转换。</p><pre><code>var x = 1;switch (x) {  case true:    console.log(&apos;x 发生类型转换&apos;);  default:    console.log(&apos;x 没有发生类型转换&apos;);}</code></pre><p>   // x 没有发生类型转换</p><h3 id="3-三元运算"><a href="#3-三元运算" class="headerlink" title="3.三元运算 ?:"></a>3.三元运算 ?:</h3><p>   (条件)?表达式1:表达式2<br>  条件为true<br>  返回表达式1<br>  条件为false<br>  返回表达式2</p><h2 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h2>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>import export require</title>
      <link href="/2019/01/03/import-export-require/"/>
      <url>/2019/01/03/import-export-require/</url>
      
        <content type="html"><![CDATA[<p>   在vue-cil脚手架搭建的项目中，经常能看到import、export、require等关键字，用的时候只到是到入模块，现在在这里对他做一个具体的认识。</p><h1 id="require"><a href="#require" class="headerlink" title="require"></a>require</h1><p>   require是CommonJS语法。CommonJS的模块是对象。输入时必须查找对象属性。这个还没研究明白///下次再讲。。</p><h1 id="export"><a href="#export" class="headerlink" title="export"></a>export</h1>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6语法</title>
      <link href="/2019/01/02/es6%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/01/02/es6%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre><code>ES6 声明变量的六种方法ES5 只有两种声明变量的方法：var命令和function命令。ES6 除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有 6 种声明变量的方法。</code></pre><h1 id="es6语法"><a href="#es6语法" class="headerlink" title="es6语法"></a>es6语法</h1><p>   es6是什么？es6就是以ECMAScript第六代规范来实现的js</p><h2 id="let和const"><a href="#let和const" class="headerlink" title="let和const"></a>let和const</h2><h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><pre><code> {  let a = 10;  var b = 1;  }a // ReferenceError: a is not defined.b // 1  </code></pre><p>上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明，let声明的变量只在它所在的代码块有效。</p><p>for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。<br> 使用var的情况i的作用域则是全局    </p><pre><code>{    var a = [];        for (var i = 0; i &lt; 10; i++) {            a[i] = function() {                console.log(i);            };        }    a[3]();//10    console.log(i)//10}</code></pre><p>使用let的情况，i每一轮循环都是新的，每个i的作用域都只在它依赖的循环体内部</p><pre><code>  {    var a=[];    for(let i=0;i&lt;10;i++)    {        a[i]= function()        {            console.log(i)         }    }                           a[3]();//3    console.log(i)//ReferenceError: i is not defined}</code></pre><h4 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h4><p>在定义一个变量前调用该变量再使用var定义该变量，不会报错。定义前的值为undefined<br>使用let会报Uncaught ReferenceError: x is not defined异常  </p><h4 id="黑域"><a href="#黑域" class="headerlink" title="黑域"></a>黑域</h4><p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。    </p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用</p><h3 id="const（常量）"><a href="#const（常量）" class="headerlink" title="const（常量）"></a>const（常量）</h3><p>  const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><p>  其他属性与let相同</p><h3 id="顶层对象（一知半解先睡觉了233）"><a href="#顶层对象（一知半解先睡觉了233）" class="headerlink" title="顶层对象（一知半解先睡觉了233）"></a>顶层对象（一知半解先睡觉了233）</h3><p>顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue-router</title>
      <link href="/2019/01/01/vue-router/"/>
      <url>/2019/01/01/vue-router/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><p>   vue-router是vue-cil搭建的前端项目中非常重要的一环。它承担了前端项目的页面跳转，和前端的权限等工作。<br>   在我看来。vue单页项目比作一颗植物，component就像叶子，router就如同枝干一样。</p><p>## </p><h2 id="vue-router的引用"><a href="#vue-router的引用" class="headerlink" title="vue router的引用"></a>vue router的引用</h2>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于svn</title>
      <link href="/2018/12/12/%E5%85%B3%E4%BA%8Esvn/"/>
      <url>/2018/12/12/%E5%85%B3%E4%BA%8Esvn/</url>
      
        <content type="html"><![CDATA[<h1 id="svn-subversion"><a href="#svn-subversion" class="headerlink" title="svn(subversion)"></a>svn(subversion)</h1><p>它是一个自由/开源的版本控制系统，一组文件存放在中心版本库，记录每一次文件和目录的修改，Subversion允许把数据恢复到早期版本，或是检查数据修改的历史，Subversion可以通过网络访问它的版本库，从而使用户在不同的电脑上进行操作。</p><h2 id="svn的安装。"><a href="#svn的安装。" class="headerlink" title="svn的安装。"></a>svn的安装。</h2><p>先安装svn服务端。然后安装svn客户端。服务端在widows下强烈推荐使用VisualSVN Server 他有一个较为便捷的图形界面。还可以加装汉化包。客户端的话最流行的是小乌龟TortoiseSVN。</p><h2 id="svn的使用"><a href="#svn的使用" class="headerlink" title="svn的使用"></a>svn的使用</h2><h3 id="1-安装小乌龟"><a href="#1-安装小乌龟" class="headerlink" title="1.安装小乌龟"></a>1.安装小乌龟</h3><h3 id="2-导出项目"><a href="#2-导出项目" class="headerlink" title="2.导出项目"></a>2.导出项目</h3><h4 id="1-idea导出项目"><a href="#1-idea导出项目" class="headerlink" title="(1)idea导出项目"></a>(1)idea导出项目</h4><p><img src="/md_images/checkoutproject1.png" alt=""></p><h4 id="2-选择要导出的svn库"><a href="#2-选择要导出的svn库" class="headerlink" title="(2)选择要导出的svn库"></a>(2)选择要导出的svn库</h4><p><img src="/md_images/selectsvn.png" alt=""><br>库默认是没有的，所以要先导入，点击”+”号。如下图：<br><img src="/md_images/selectsvn1.png" alt=""></p><p>然后在弹出的窗体中输入url地址<br><img src="/md_images/selectsvn2.png" alt=""><br>然后点击checkout按钮可以直接导出项目<br><img src="/md_images/selectsvn3.png" alt=""></p><h3 id="3版本管理"><a href="#3版本管理" class="headerlink" title="3版本管理"></a>3版本管理</h3><h4 id="1-查看历史版本"><a href="#1-查看历史版本" class="headerlink" title="(1)查看历史版本"></a>(1)查看历史版本</h4><p><img src="/md_images/selectversion.png" alt=""></p><h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><p><img src="/md_images/banbenguanli.png" alt=""></p><h3 id="4具体使用详情"><a href="#4具体使用详情" class="headerlink" title="4具体使用详情"></a>4具体使用详情</h3><h4 id="1-更新项目"><a href="#1-更新项目" class="headerlink" title="(1)更新项目"></a>(1)更新项目</h4><p><img src="/md_images/svnupdate.png" alt=""></p><h4 id="2-提交修改"><a href="#2-提交修改" class="headerlink" title="(2)提交修改"></a>(2)提交修改</h4><p><img src="/md_images/tijiaobendixiugai.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 版本控制工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery</title>
      <link href="/2018/12/11/jquery/"/>
      <url>/2018/12/11/jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="Jquery"><a href="#Jquery" class="headerlink" title="Jquery"></a>Jquery</h1><p>是js代码库。他的设计宗旨是”write less do more”,及倡导写更少的代码，做更多的事情。它封装常用的js功能代码。提供一种简单的js设计模式。优化html文档的操作。事件处理。动画处理和ajax交互jquery的核心特征可以总结为具有独特的链式语法和短小清晰的多功能接口。具有高效灵活的css选择器。并且可以对css选择器进行扩展。拥有便捷的插件扩展机制和丰富的插件。</p><h2 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1.选择器"></a>1.选择器</h2>]]></content>
      
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于spring的ioc</title>
      <link href="/2018/12/01/%E5%85%B3%E4%BA%8Espring%E7%9A%84ioc/"/>
      <url>/2018/12/01/%E5%85%B3%E4%BA%8Espring%E7%9A%84ioc/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-ioc"><a href="#spring-ioc" class="headerlink" title="spring ioc"></a>spring ioc</h1><h2 id="spring-ioc是什么。"><a href="#spring-ioc是什么。" class="headerlink" title="spring ioc是什么。"></a>spring ioc是什么。</h2><pre><code>Ioc—Inversion of Control，即“控制反转”，不是一种技术是一种设计思想。在Java开发中。ioc意味着将设计好的程序交给容器控制。而不是在对象内部直接控制。</code></pre><h2 id="如何理解好ioc"><a href="#如何理解好ioc" class="headerlink" title="如何理解好ioc"></a>如何理解好ioc</h2><pre><code>理解好ioc的关键在于：谁控制谁，控制什么，为什么是反转，那些方面反转了。</code></pre><h3 id="谁控制谁，控制什么"><a href="#谁控制谁，控制什么" class="headerlink" title="谁控制谁，控制什么"></a>谁控制谁，控制什么</h3><pre><code>传统javase设计，我们直接在对象内部通过new进行创建对象。是程序主动去创建依赖对象；而ioc是专门有一个容器来创建对象。既用ioc容器来控制对象的创建。提问1：谁控制谁？ioc容器控制了对象。提问2：控制了什么？主要控制了外部资源的获取。</code></pre><h3 id="为何是反转，那些方面反转了。"><a href="#为何是反转，那些方面反转了。" class="headerlink" title="为何是反转，那些方面反转了。"></a>为何是反转，那些方面反转了。</h3><pre><code>有反转就有正转。传统应用程序是由我们自己在对象中主动，控制去直接依赖对象。也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；提问1：为什么是反转？因为由容器帮我们注入依赖对象，对象只是被动接受依赖对象。所以是反转。提问2：那些是反转？依赖对象的获取被反转了。</code></pre><h1 id="ioc能做什么？"><a href="#ioc能做什么？" class="headerlink" title="ioc能做什么？"></a>ioc能做什么？</h1><pre><code>ioc不是一种技术，是一种编程思想，一种重要的面向对象编程的法则。它能轻松指导我们设计出松耦合。更优良的程序。</code></pre><h1 id="ioc和DI"><a href="#ioc和DI" class="headerlink" title="ioc和DI"></a>ioc和DI</h1><pre><code>DI—Dependency Injection，即“依赖注入”：组件之间的依赖关系由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。    </code></pre><p><em>谁依赖于谁？<br>应用程序依赖于ioc容器。</em>为什么要依赖？<br>应用程序需要ioc容器来提供对象需要的外部资源<br><em>谁注入谁？<br>ioc容器注入应用程序某个对象，应用程序依赖的对象。</em>注入了什么？<br>注入某个对象所需要的外部资源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目实践1</title>
      <link href="/2018/11/18/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B51/"/>
      <url>/2018/11/18/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B51/</url>
      
        <content type="html"><![CDATA[<h1 id="我的分享平台项目（vue-springboot-mybatisplus）"><a href="#我的分享平台项目（vue-springboot-mybatisplus）" class="headerlink" title="我的分享平台项目（vue+springboot+mybatisplus）"></a>我的分享平台项目（vue+springboot+mybatisplus）</h1><h2 id="项目工具"><a href="#项目工具" class="headerlink" title="项目工具"></a>项目工具</h2><p>node.js,maven </p>]]></content>
      
      
      
        <tags>
            
            <tag> 项目实践 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>spring的优缺点</title>
      <link href="/2018/11/18/spring%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2018/11/18/spring%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Spring的好处"><a href="#使用Spring的好处" class="headerlink" title="使用Spring的好处"></a>使用Spring的好处</h1><h2 id="轻量级框架"><a href="#轻量级框架" class="headerlink" title="轻量级框架"></a>轻量级框架</h2><p>Spring是轻量级框架,基本的版本大约2M</p><h2 id="控制反转"><a href="#控制反转" class="headerlink" title="控制反转"></a>控制反转</h2><p>Spring通过控制反转实现松散耦合,对象们给它们的依赖,而不是创建或者查找依赖的对象们 。<br>方便解耦,简化开发</p><h2 id="面相切面的编程-AOP"><a href="#面相切面的编程-AOP" class="headerlink" title="面相切面的编程 AOP"></a>面相切面的编程 AOP</h2><p>Spring支持面相切面的编程,并且把应用业务逻辑和系统分开</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>Spring 包含并管理应用中对象的生命周期和配置</p><h2 id="MVC框架"><a href="#MVC框架" class="headerlink" title="MVC框架"></a>MVC框架</h2><p>Spring的WEB框架是个精心设计的框架,是WEB框架的一个很好的替代品</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>Spring 提供一个持续的事务管理接口,可以扩展到上至本地事务下至全局事务(JTA)</p><p>Spring 提供方便的API把具体技术的相关异常(比如由JDBC Hibernate or JDO 抛出的) 转化为一致的 unchecked异常</p><h1 id="关于Spring框架的缺点"><a href="#关于Spring框架的缺点" class="headerlink" title="关于Spring框架的缺点"></a>关于Spring框架的缺点</h1><h2 id="明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。"><a href="#明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。" class="headerlink" title="明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。"></a>明明一个很轻量级的框架，却给人感觉大而全，这就是它的缺点。</h2><p>Spring的核心概念是 IOP（控制反转） 和AOC(面向切面) 他的服务对象就是那些bean，spring完全可以理解为存放那些bean的容器。</p><h2 id="关于IOC（控制反转）"><a href="#关于IOC（控制反转）" class="headerlink" title="关于IOC（控制反转）"></a>关于IOC（控制反转）</h2><p>IOC的目的在于让开发者关注的重心在于如何使用那些bean，不管bean的来源是哪儿。@Autowired就出现，我们只需要关心如何使用。<br>但是为了弄好这个，Spring弄了多少东西，BeanDefinition，BeanFactory，FactoryBean，然后Bean的生命周期接口好几个，Aware接口又好几个，等等。</p><h2 id="关于AOP（面向切面）"><a href="#关于AOP（面向切面）" class="headerlink" title="关于AOP（面向切面）"></a>关于AOP（面向切面）</h2><p>AOP在spring中的主要目的是以一种非浸入的方式对bean进行扩展。为了对bean支持，Spring弄了一套AspctJ的子集，既有Java原生的接口代理，又有更加灵活的Cglib，光是AOP的概念就不少，更不要说实现的原理。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="Spring就是围绕着bean展开的"><a href="#Spring就是围绕着bean展开的" class="headerlink" title="Spring就是围绕着bean展开的"></a>Spring就是围绕着bean展开的</h2><p>Spring主要就是作为bean的容器，在这个基础上，有了SpringMVC，有了JPA，有了Cloud，有了Data Flow，以及其他模块。</p><h2 id="不全是bean"><a href="#不全是bean" class="headerlink" title="不全是bean"></a>不全是bean</h2><h3 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h3><p>核心是Hibernate</p><h3 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h3><p>核心是另外一套微服务框架。</p><h2 id="调用繁复"><a href="#调用繁复" class="headerlink" title="调用繁复"></a>调用繁复</h2><p>###<br>随便找个地方打断点，调用就不下二十来层，在现在这种强调轻量化服务的大环境下，是较大的弊端。</p><p>###<br>Java这门语言动态性本来就是它的弱项，Spring能把Java包装的像个动态化的语言已经蛮拼了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/17/hello-world/"/>
      <url>/2018/11/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
